{
  "version": 3,
  "sources": ["../src/raytype.tsx", "../src/english.json", "../src/utils.ts", "../src/hooks.ts"],
  "sourcesContent": ["import { List, Icon, Color, ActionPanel, Action } from \"@raycast/api\";\nimport { calculateAccuracy } from \"./utils\";\nimport { useGame } from \"./hooks\";\n\nexport default function Main() {\n  const {\n    isFinish,\n    typedText,\n    setTypedText,\n    speed,\n    test,\n    content,\n    failedCount,\n    isCorrect,\n    reloadGame,\n    inProgress,\n    testLength,\n    setTestLength,\n  } = useGame();\n\n  return (\n    <List\n      searchText={typedText}\n      isLoading={inProgress}\n      isShowingDetail={true}\n      searchBarPlaceholder=\"Type here\"\n      onSearchTextChange={(value) => setTypedText(value)}\n      searchBarAccessory={\n        <List.Dropdown\n          tooltip=\"Word Amount\"\n          defaultValue={testLength}\n          onChange={setTestLength}\n          filtering={false}\n          storeValue={true}\n        >\n          <List.Dropdown.Item title=\"10 words\" value=\"10\" />\n          <List.Dropdown.Item title=\"25 words\" value=\"25\" />\n          <List.Dropdown.Item title=\"50 words\" value=\"50\" />\n          <List.Dropdown.Item title=\"100 words\" value=\"100\" />\n        </List.Dropdown>\n      }\n    >\n      <List.Item\n        icon={{\n          source: Icon.Stopwatch,\n          tintColor: isCorrect ? Color.Green : Color.Red,\n        }}\n        title={`${speed} wpm`}\n        actions={\n          <ActionPanel>\n            <Action title=\"Reload\" onAction={() => reloadGame()} icon={Icon.Bolt} />\n          </ActionPanel>\n        }\n        detail={\n          <List.Item.Detail\n            markdown={content}\n            metadata={\n              isFinish ? (\n                <List.Item.Detail.Metadata>\n                  <List.Item.Detail.Metadata.Label title=\"Speed\" text={{ color: Color.Green, value: `${speed} wpm` }} />\n                  <List.Item.Detail.Metadata.Label\n                    title=\"Accuracy\"\n                    text={{ color: Color.Red, value: `${calculateAccuracy(test, failedCount)} %` }}\n                  />\n                </List.Item.Detail.Metadata>\n              ) : null\n            }\n          />\n        }\n      />\n    </List>\n  );\n}\n", "[\n  \"the\",\n  \"be\",\n  \"of\",\n  \"and\",\n  \"a\",\n  \"to\",\n  \"in\",\n  \"he\",\n  \"have\",\n  \"it\",\n  \"that\",\n  \"for\",\n  \"they\",\n  \"I\",\n  \"with\",\n  \"as\",\n  \"not\",\n  \"on\",\n  \"she\",\n  \"at\",\n  \"by\",\n  \"this\",\n  \"we\",\n  \"you\",\n  \"do\",\n  \"but\",\n  \"from\",\n  \"or\",\n  \"which\",\n  \"one\",\n  \"would\",\n  \"all\",\n  \"will\",\n  \"there\",\n  \"say\",\n  \"who\",\n  \"make\",\n  \"when\",\n  \"can\",\n  \"more\",\n  \"if\",\n  \"no\",\n  \"man\",\n  \"out\",\n  \"other\",\n  \"so\",\n  \"what\",\n  \"time\",\n  \"up\",\n  \"go\",\n  \"about\",\n  \"than\",\n  \"into\",\n  \"could\",\n  \"state\",\n  \"only\",\n  \"new\",\n  \"year\",\n  \"some\",\n  \"take\",\n  \"come\",\n  \"these\",\n  \"know\",\n  \"see\",\n  \"use\",\n  \"get\",\n  \"like\",\n  \"then\",\n  \"first\",\n  \"any\",\n  \"work\",\n  \"now\",\n  \"may\",\n  \"such\",\n  \"give\",\n  \"over\",\n  \"think\",\n  \"most\",\n  \"even\",\n  \"find\",\n  \"day\",\n  \"also\",\n  \"after\",\n  \"way\",\n  \"many\",\n  \"must\",\n  \"look\",\n  \"before\",\n  \"great\",\n  \"back\",\n  \"through\",\n  \"long\",\n  \"where\",\n  \"much\",\n  \"should\",\n  \"well\",\n  \"people\",\n  \"down\",\n  \"own\",\n  \"just\",\n  \"because\",\n  \"good\",\n  \"each\",\n  \"those\",\n  \"feel\",\n  \"seem\",\n  \"how\",\n  \"high\",\n  \"too\",\n  \"place\",\n  \"little\",\n  \"world\",\n  \"very\",\n  \"still\",\n  \"nation\",\n  \"hand\",\n  \"old\",\n  \"life\",\n  \"tell\",\n  \"write\",\n  \"become\",\n  \"here\",\n  \"show\",\n  \"house\",\n  \"both\",\n  \"between\",\n  \"need\",\n  \"mean\",\n  \"call\",\n  \"develop\",\n  \"under\",\n  \"last\",\n  \"right\",\n  \"move\",\n  \"thing\",\n  \"general\",\n  \"school\",\n  \"never\",\n  \"same\",\n  \"another\",\n  \"begin\",\n  \"while\",\n  \"number\",\n  \"part\",\n  \"turn\",\n  \"real\",\n  \"leave\",\n  \"might\",\n  \"want\",\n  \"point\",\n  \"form\",\n  \"off\",\n  \"child\",\n  \"few\",\n  \"small\",\n  \"since\",\n  \"against\",\n  \"ask\",\n  \"late\",\n  \"home\",\n  \"interest\",\n  \"large\",\n  \"person\",\n  \"end\",\n  \"open\",\n  \"public\",\n  \"follow\",\n  \"during\",\n  \"present\",\n  \"without\",\n  \"again\",\n  \"hold\",\n  \"govern\",\n  \"around\",\n  \"possible\",\n  \"head\",\n  \"consider\",\n  \"word\",\n  \"program\",\n  \"problem\",\n  \"however\",\n  \"lead\",\n  \"system\",\n  \"set\",\n  \"order\",\n  \"eye\",\n  \"plan\",\n  \"run\",\n  \"keep\",\n  \"face\",\n  \"fact\",\n  \"group\",\n  \"play\",\n  \"stand\",\n  \"increase\",\n  \"early\",\n  \"course\",\n  \"change\",\n  \"help\",\n  \"line\"\n]\n", "import englishWords from \"./english.json\";\n\nexport function calculateWPM(startTime: Date, text: string) {\n  // Calculate the time taken in seconds\n  const endTime = new Date();\n  const timeInSeconds = (endTime.getTime() - startTime.getTime()) / 1000;\n\n  // Count the number of words in the typed text\n  const wordCount = text.trim().split(/\\s+/).length;\n\n  // Calculate the WPM\n  const wpm = Math.round(wordCount / (timeInSeconds / 60));\n\n  return wpm;\n}\n\nexport function calculateAccuracy(content: string, failedCount: number) {\n  return Math.round(((content.length - failedCount) / content.length) * 100);\n}\n\n// Compare typedText with content if have similar word in order from left to right\n// then bold that text\n// For example\n// typedText: 'Hello'\n// content: 'Hello World'\n// Then result => ['**Hello** World', 5]\n// 5 is matchedCount\nexport function generateMatchingWords(\n  typedText: string,\n  content: string,\n  callbackFailed: () => void,\n): [string, number] {\n  // If have no typing yet then return original content\n  if (typedText == \"\") {\n    return [content, 0];\n  }\n\n  let matchUntil: number | undefined = undefined;\n\n  typedText.split(\"\").forEach((word: string, index) => {\n    if (word !== content[index]) {\n      callbackFailed();\n      return;\n    }\n\n    matchUntil = index;\n  });\n\n  // If not match anything then return original content\n  if (matchUntil === undefined) {\n    return [content, 0];\n  }\n\n  const finalText = content.split(\"\").reduce((result, currentWord, currentIndex) => {\n    if (currentWord !== \" \" && currentIndex === matchUntil) {\n      result += `${currentWord}**`;\n      return result;\n    }\n\n    if (currentWord === \" \" && currentIndex === matchUntil) {\n      result += `**${currentWord}`;\n      return result;\n    }\n\n    result += currentWord;\n\n    return result;\n  }, \"**\");\n\n  return [finalText, matchUntil + 1];\n}\n\nexport function generateSuccessMessage() {\n  return `You are super, to reload press **Enter**`;\n}\n\nexport function generateNewTest(length = 10): string {\n  let word = 0;\n  let result = \"\";\n\n  while (word < length) {\n    const randomIndex = Math.floor(Math.random() * englishWords.length);\n    const randomWord = englishWords[randomIndex];\n    result += randomWord;\n\n    if (word !== length - 1) {\n      result += \" \";\n    }\n\n    word += 1;\n  }\n\n  return result;\n}\n", "import { useEffect, useState } from \"react\";\nimport { calculateWPM, generateMatchingWords, generateNewTest, generateSuccessMessage } from \"./utils\";\n\nexport function useGame() {\n  const [startTime, setStartTime] = useState<Date | null>(null);\n  const [test, setTest] = useState(\"\");\n  const [testLength, setTestLength] = useState<string>(\"10\");\n\n  // Speed has been counted by word per minutes (wpm)\n  const [speed, setSpeed] = useState<number>(0);\n  const [failedCount, setFailedCount] = useState<number>(0);\n  const [isCorrect, setIsCorrect] = useState<boolean>(true);\n\n  const [typedText, setTypedText] = useState<string>(\"\");\n  const [content, setContent] = useState<string>(test);\n\n  const [isFinish, setIsFinish] = useState<boolean>(false);\n  const [inProgress, setInProgress] = useState<boolean>(false);\n\n  function reloadGame() {\n    setTypedText(\"\");\n    setSpeed(0);\n    setStartTime(null);\n\n    setFailedCount(0);\n    setIsCorrect(true);\n\n    // Generate new test\n    const test = generateNewTest(parseInt(testLength));\n\n    setTest(test);\n    setTypedText(\"\");\n    setContent(test);\n\n    setInProgress(false);\n    setIsFinish(false);\n  }\n\n  useEffect(() => {\n    reloadGame();\n  }, []);\n\n  useEffect(() => {\n    reloadGame();\n  }, [testLength]);\n\n  useEffect(() => {\n    // If game is finished the we dont want to process anything\n    if (isFinish || typedText.length === 0) {\n      setInProgress(false);\n      return;\n    }\n\n    if (!inProgress) {\n      setInProgress(true);\n    }\n\n    let beginning: Date | null = null;\n\n    if (!startTime) {\n      beginning = new Date();\n      setStartTime(beginning);\n    } else {\n      beginning = startTime;\n    }\n\n    const [matchingWords, matchedCount] = generateMatchingWords(typedText, test, () => {\n      setFailedCount(failedCount + 1);\n    });\n\n    if (matchedCount === test.length) {\n      setIsFinish(true);\n      setInProgress(false);\n      setTypedText(\"\");\n      setContent(generateSuccessMessage());\n      return;\n    }\n\n    setIsCorrect(matchedCount === typedText.length);\n    setContent(matchingWords);\n\n    setSpeed(calculateWPM(beginning, typedText));\n  }, [typedText]);\n\n  return {\n    content: content,\n    isFinish: isFinish,\n    isCorrect: isCorrect,\n    speed: speed,\n    failedCount: failedCount,\n    reloadGame: reloadGame,\n    typedText: typedText,\n    setTypedText: setTypedText,\n    inProgress: inProgress,\n    setTestLength: setTestLength,\n    testLength: testLength,\n    test: test,\n  };\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAuD,wBCAvD,IAAAC,EAAA,CACE,MACA,KACA,KACA,MACA,IACA,KACA,KACA,KACA,OACA,KACA,OACA,MACA,OACA,IACA,OACA,KACA,MACA,KACA,MACA,KACA,KACA,OACA,KACA,MACA,KACA,MACA,OACA,KACA,QACA,MACA,QACA,MACA,OACA,QACA,MACA,MACA,OACA,OACA,MACA,OACA,KACA,KACA,MACA,MACA,QACA,KACA,OACA,OACA,KACA,KACA,QACA,OACA,OACA,QACA,QACA,OACA,MACA,OACA,OACA,OACA,OACA,QACA,OACA,MACA,MACA,MACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,OACA,OACA,OACA,QACA,OACA,OACA,OACA,MACA,OACA,QACA,MACA,OACA,OACA,OACA,SACA,QACA,OACA,UACA,OACA,QACA,OACA,SACA,OACA,SACA,OACA,MACA,OACA,UACA,OACA,OACA,QACA,OACA,OACA,MACA,OACA,MACA,QACA,SACA,QACA,OACA,QACA,SACA,OACA,MACA,OACA,OACA,QACA,SACA,OACA,OACA,QACA,OACA,UACA,OACA,OACA,OACA,UACA,QACA,OACA,QACA,OACA,QACA,UACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,OACA,OACA,QACA,QACA,OACA,QACA,OACA,MACA,QACA,MACA,QACA,QACA,UACA,MACA,OACA,OACA,WACA,QACA,SACA,MACA,OACA,SACA,SACA,SACA,UACA,UACA,QACA,OACA,SACA,SACA,WACA,OACA,WACA,OACA,UACA,UACA,UACA,OACA,SACA,MACA,QACA,MACA,OACA,MACA,OACA,OACA,OACA,QACA,OACA,QACA,WACA,QACA,SACA,SACA,OACA,MACF,ECvMO,SAASC,EAAaC,EAAiBC,EAAc,CAG1D,IAAMC,GADU,IAAI,KAAK,EACM,QAAQ,EAAIF,EAAU,QAAQ,GAAK,IAG5DG,EAAYF,EA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",
  "names": ["raytype_exports", "__export", "Main", "__toCommonJS", "import_api", "english_default", "calculateWPM", "startTime", "text", "timeInSeconds", "wordCount", "calculateAccuracy", "content", "failedCount", "generateMatchingWords", "typedText", "callbackFailed", "matchUntil", "word", "index", "result", "currentWord", "currentIndex", "generateSuccessMessage", "generateNewTest", "length", "randomIndex", "english_default", "randomWord", "import_react", "useGame", "startTime", "setStartTime", "test", "setTest", "testLength", "setTestLength", "speed", "setSpeed", "failedCount", "setFailedCount", "isCorrect", "setIsCorrect", "typedText", "setTypedText", "content", "setContent", "isFinish", "setIsFinish", "inProgress", "setInProgress", "reloadGame", "generateNewTest", "beginning", "matchingWords", "matchedCount", "generateMatchingWords", "generateSuccessMessage", "calculateWPM", "import_jsx_runtime", "Main", "isFinish", "typedText", "setTypedText", "speed", "test", "content", "failedCount", "isCorrect", "reloadGame", "inProgress", "testLength", "setTestLength", "useGame", "value", "calculateAccuracy"]
}
